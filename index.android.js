


/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Navigator,
  TouchableHighlight,
  ART

} from 'react-native';

//import MapView from 'react-native-maps';
import Button from 'apsl-react-native-button'

import Voice from 'react-native-voice';


var PushNotification = require('react-native-push-notification');

PushNotification.configure({

    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function(token) {
        console.log( 'TOKEN:', token );
    },

    // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.log( 'NOTIFICATION:', notification );
    },


    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
});


export default class Landing extends Component {
  render() {
      /*<View style={styles.container}>
        <Text style={styles.welcome}>
          TriggerNow
        </Text>
        <Text style={styles.instructions}>
          Promoting mindfullness through Data
        </Text>
      </View> */

      const routes = [
       {title: 'Main', index: 0},
       {title: 'Data', index: 1},
     ];

    return (

        <Scene index={0} />

    );
  }
}

class Scene extends Component {
    render(){
        if(this.props.index === 0){
            return(<Main/>)
        } else {
            return(<Data/>)
        }
    }
}

class Main extends Component {
    constructor(props) {
       super(props);
       this.state = {
         recognized: '',
         pitch: '',
         error: '',
         end: '',
         started: '',
         results: [],
         partialResults: [],
         interval:'',
         emotionalState:'good',
         listening:false
       };
       Voice.onSpeechStart = this.onSpeechStart.bind(this);
       Voice.onSpeechRecognized = this.onSpeechRecognized.bind(this);
       Voice.onSpeechEnd = this.onSpeechEnd.bind(this);
       Voice.onSpeechError = this.onSpeechError.bind(this);
       Voice.onSpeechResults = this.onSpeechResults.bind(this);
       //Voice.onSpeechPartialResults = this.onSpeechPartialResults.bind(this);
       Voice.onSpeechVolumeChanged = this.onSpeechVolumeChanged.bind(this);

       this._startDataCollection = this._startDataCollection.bind(this);
       this._stopDataCollection = this._stopDataCollection.bind(this);
     }

  componentDidUpdate(){
      if(this.state.listening && this.state.emotionalState == 'bad' ){
        PushNotification.localNotification({
          /* Android Only Properties */
          id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          ticker: "My Notification Ticker", // (optional)
          autoCancel: true, // (optional) default: true
          largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
          smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
          bigText: "Are you alright?", // (optional) default: "message" prop
          subText: "TriggerNow", // (optional) default: none
          color: "red", // (optional) default: system default
          vibrate: true, // (optional) default: true
          vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000


          /* iOS and Android properties */
          title: "TriggerNow", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
          message: "Are you alright?", // (required)
          playSound: false, // (optional) default: true

        })

        this.setState({emotionalState:'good'})

      }

}

  onSpeechStart(e) {
    this.setState({
      started: true,
    });
  }
  onSpeechRecognized(e) {
    this.setState({
      recognized: true,
    });
  }
  onSpeechEnd(e) {
    this.setState({
      end:true,
    });
  }
  onSpeechError(e) {
    this.setState({
      error: e.error,
    });
  }

  onSpeechResults(e) {
    this.setState({
      results: e.value,
    }, () => {
      fetch('https://trigger-now.herokuapp.com/api/words', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          words: this.state.results[0]

        })
      })
      .then((response) => response.json())
      .then((responseJson) => {
        //return responseJson.movies;
        this.setState({emotionalState: responseJson.emotionalState})
      })
      .catch((error) => {
        console.error(error);
      });
   })
  }

  onSpeechVolumeChanged(e) {
    this.setState({
      pitch: e.value,
    });
  }

  _startRecognizing(e) {
    this.setState({
      recognized: '',
      pitch: '',
      error: '',
      started: '',
      results: [],
      partialResults: [],
    });
    const error = Voice.start('en');
    if (error) {
      ToastAndroid.show(error, ToastAndroid.SHORT);
    }
  }
  _stopRecognizing(e) {
    const error = Voice.stop();
    if (error) {
      ToastAndroid.show(error, ToastAndroid.SHORT);
    }
  }


    static get defaultProps() {
        return {
          title: 'Main'
        };
      }

     _startDataCollection(e){

        this.setState({listening:true});

        this._startRecognizing(e);

        var interval = setInterval((e) => {
                //if(this.state.end === true)
                 this._startRecognizing(e);

         }, 3000)

         this.setState({
           interval: interval
         });
     }

     _stopDataCollection(e){
         //this._stopRecognizing(e)
         this.setState({listening:false})
         clearInterval(this.state.interval)



        // this._stopRecognizing(null);
     }


    render() {


    return (
      <View style={styles.container}>

        <Text style={styles.welcome}>
          TriggerNow
        </Text>
        <Text style={styles.instructions}>
            Helping you become more mindful of your words and emotions
        </Text>
        {/*<Text style={styles.instructions}>

        </Text>
        <Text
          style={styles.stat}>
          {`Started: ${this.state.started}`}
        </Text>
        <Text
          style={styles.stat}>
          {`Recognized: ${this.state.recognized}`}
        </Text>
        <Text
          style={styles.stat}>
          {`Pitch: ${this.state.pitch}`}
        </Text>
        <Text
          style={styles.stat}>
          {`Error: ${this.state.error}`}
        </Text>
        <Text
          style={styles.stat}>
          Results
        </Text>
        {this.state.results.map((result, index) => {
          return (
            <Text
              key={`result-${index}`}
              style={styles.stat}>
              {result}
            </Text>
          )
      })}
        <Text
          style={styles.stat}>
          {`End: ${this.state.end}`}
        </Text>*/}
        <Button
            style={styles.actionStart}
            onPress={this._startDataCollection.bind(this)}>
            Start
        </Button>


        <Button
            style={styles.actionStop}
            onPress={this._stopDataCollection.bind(this)}>

            Stop

        </Button>
        {
            this.state.listening?
            <Text style={{left:50, marginTop:10}}> analyzing your voice patterns... </Text>
            : null
        }


      </View>


        );
    }
}

class Data extends Component {
    render(){

        return(
            <View style={styles.container}>

            </View>

        );
    }
}



const styles = StyleSheet.create({
  container: {

    justifyContent: 'space-between',
    marginLeft:30,
    marginRight:30,
    backgroundColor: '#F5FCFF'
  },
  welcome: {
    paddingTop: 50,
    fontSize: 45,
    textAlign: 'center',
    margin: 10

  },
  instructions: {
    paddingTop: 10,
    textAlign: 'center',
    color: '#333333',
    paddingBottom:20

  },
  actionStart:{

      backgroundColor: '#72bcd4',
      marginTop:5,
      marginBottom:5
  },

  actionStop:{
      marginTop: 10,
      backgroundColor: '#72bcd4'

  }



});

AppRegistry.registerComponent('Triggernow', () => Landing);
